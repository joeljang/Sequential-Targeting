0/12544 [00:00<? ?it/s] wheel.py:112: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  label = torch.tensor(batch.label, dtype=torch.long, device=self.device)
0/12544 [00:00<? ?it/s]  0 loss: 1.1734, acc: 0.0: 640/12544 [00:05<01:38 120.58it/s]  0 loss: 1.1734, acc: 0.0: 640/12544 [00:05<01:38 120.58it/s]  0 loss: 0.82173, acc: 0.56392: 1280/12544 [00:10<01:32 121.82it/s]  0 loss: 0.82173, acc: 0.56392: 1280/12544 [00:10<01:32 121.82it/s]  0 loss: 0.73669, acc: 0.61533: 1920/12544 [00:15<01:24 126.36it/s]  0 loss: 0.73669, acc: 0.61533: 1920/12544 [00:15<01:24 126.36it/s]  0 loss: 0.70263, acc: 0.63659: 2560/12544 [00:19<01:16 130.15it/s]  0 loss: 0.70263, acc: 0.63659: 2560/12544 [00:20<01:16 130.15it/s]  0 loss: 0.68277, acc: 0.65015: 3200/12544 [00:24<01:12 129.31it/s]  0 loss: 0.68277, acc: 0.65015: 3200/12544 [00:25<01:12 129.31it/s]  0 loss: 0.67663, acc: 0.65104: 3840/12544 [00:29<01:08 127.37it/s]  0 loss: 0.67663, acc: 0.65104: 3840/12544 [00:30<01:08 127.37it/s]  0 loss: 0.67223, acc: 0.6501:  4480/12544 [00:34<01:02 128.04it/s]  0 loss: 0.67223, acc: 0.6501: 4480/12544 [00:35<01:02 128.04it/s]  0 loss: 0.6693, acc: 0.64767: 5120/12544 [00:40<00:59 125.65it/s]  0 loss: 0.6693, acc: 0.64767: 5120/12544 [00:40<00:59 125.65it/s]  0 loss: 0.66508, acc: 0.64969: 5760/12544 [00:45<00:53 126.59it/s]  0 loss: 0.66508, acc: 0.64969: 5760/12544 [00:45<00:53 126.59it/s]  0 loss: 0.65989, acc: 0.65264: 6400/12544 [00:50<00:49 125.27it/s]  0 loss: 0.65989, acc: 0.65264: 6400/12544 [00:50<00:49 125.27it/s]  0 loss: 0.65741, acc: 0.65161: 7040/12544 [00:55<00:42 128.35it/s]  0 loss: 0.65741, acc: 0.65161: 7040/12544 [00:55<00:42 128.35it/s]  0 loss: 0.65404, acc: 0.64977: 7680/12544 [01:00<00:37 128.01it/s]  0 loss: 0.65404, acc: 0.64977: 7680/12544 [01:00<00:37 128.01it/s]  0 loss: 0.64956, acc: 0.65238: 8320/12544 [01:05<00:33 126.59it/s]  0 loss: 0.64956, acc: 0.65238: 8320/12544 [01:05<00:33 126.59it/s]  0 loss: 0.64659, acc: 0.65064: 8960/12544 [01:10<00:27 128.65it/s]  0 loss: 0.64659, acc: 0.65064: 8960/12544 [01:10<00:27 128.65it/s]  0 loss: 0.64213, acc: 0.65326: 9600/12544 [01:14<00:22 129.92it/s]  0 loss: 0.64213, acc: 0.65326: 9600/12544 [01:15<00:22 129.92it/s]  0 loss: 0.63698, acc: 0.65739: 10240/12544 [01:19<00:17 128.76it/s]  0 loss: 0.63698, acc: 0.65739: 10240/12544 [01:20<00:17 128.76it/s]  0 loss: 0.63253, acc: 0.66042: 10880/12544 [01:24<00:12 128.94it/s]  0 loss: 0.63253, acc: 0.66042: 10880/12544 [01:25<00:12 128.94it/s]  0 loss: 0.62881, acc: 0.66237: 11520/12544 [01:29<00:07 129.43it/s]  0 loss: 0.62881, acc: 0.66237: 11520/12544 [01:30<00:07 129.43it/s]  0 loss: 0.62482, acc: 0.66402: 12160/12544 [01:35<00:03 126.25it/s]  0 loss: 0.62482, acc: 0.66402: 12160/12544 [01:35<00:03 126.25it/s]  0 loss: 0.6206, acc: 0.66688:  12544/12544 [01:37<00:00 128.12it/s]  0 loss: 0.6206, acc: 0.66688: 
{"type": "train", "dataset": "combined12500", "epoch": 0, "loss": 0.6187506990420534, "acc": 0.6682930731083027}
| 0/1024 [00:00<?, ?it/s]wheel.py:151: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  label = torch.tensor(batch.label, dtype=torch.long, device=self.device)
| 256/1024 [00:00<00:00, 2424.49it/s]| 448/1024 [00:00<00:00, 2011.05it/s]| 576/1024 [00:00<00:00, 1596.28it/s]| 704/1024 [00:00<00:00, 1227.05it/s]| 832/1024 [00:00<00:00, 935.25it/s] | 960/1024 [00:01<00:00, 697.41it/s]| 1024/1024 [00:01<00:00, 851.05it/s]
Traceback (most recent call last):
  File "wheel.py", line 199, in <module>
    wheel.train()
  File "wheel.py", line 134, in train
    'epoch': epoch, 'accuracy': accuracy, 'precision': prec, 'recall': recall, 'f1score': f1score,'f1s':f1s}))
  File "/usr/lib/python3.6/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "/usr/lib/python3.6/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/usr/lib/python3.6/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/usr/lib/python3.6/json/encoder.py", line 180, in default
    o.__class__.__name__)
TypeError: Object of type 'ndarray' is not JSON serializable
